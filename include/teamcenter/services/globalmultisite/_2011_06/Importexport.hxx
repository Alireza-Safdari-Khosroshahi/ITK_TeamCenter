/* 
 Copyright 2012 Siemens Product Lifecycle Management Software Inc. All Rights Reserved.
 ==================================================
 Copyright 2012
 Siemens Product Lifecycle Management Software Inc.
 All Rights Reserved.
 ==================================================
 Copyright 2012 Siemens Product Lifecycle Management Software Inc. All Rights Reserved.

 ==================================================

   Auto-generated source from service interface.
                 DO NOT EDIT

 ==================================================
*/

#ifndef TEAMCENTER_SERVICES_GLOBALMULTISITE__2011_06_IMPORTEXPORT_HXX
#define TEAMCENTER_SERVICES_GLOBALMULTISITE__2011_06_IMPORTEXPORT_HXX

#include <teamcenter/soa/client/model/GSIdentity.hxx>


#include <teamcenter/soa/client/ModelObject.hxx>
#include <teamcenter/soa/client/ServiceData.hxx>
#include <teamcenter/soa/client/PartialErrors.hxx>
#include <teamcenter/soa/client/Preferences.hxx>

#include <teamcenter/services/globalmultisite/GlobalMultiSite_exports.h>

namespace Teamcenter
{
    namespace Services
    {
        namespace Globalmultisite
        {
            namespace _2011_06
            {
                class Importexport;

class TCSOAGLOBALMULTISITESTRONGMNGD_API Importexport
{
public:

    struct CreateGSIdentitiesResponse;
    struct GetHashedUIDResponse;
    struct TIEGSIdentityInput;

    /**
     * The CreateGSIdentitiesResponse structure defines the response from createGSIdentities
     * operation.It contains vector of GS identity object references that were created.
     */
    struct CreateGSIdentitiesResponse
    {
        /**
         * A list of GS identity object references.
         */
        std::vector< Teamcenter::Soa::Common::AutoPtr<Teamcenter::Soa::Client::Model::GSIdentity>  > gsIdentities;
        /**
         * Service data contains the list of created or modified objects and also the partial
         * errors.
         */
        Teamcenter::Soa::Client::ServiceData serviceData;
    };

    /**
     * The GetHashedUIDResponse structure defines the response from getHashedUID operation.
     * It contains hashed uid generated by taking the hash key and site-id as input.
     */
    struct GetHashedUIDResponse
    {
        /**
         * The hashed uid  generated.
         */
        std::string hashedUID;
        /**
         * Service data contains the list of created or modified objects and also the partial
         * errors.
         */
        Teamcenter::Soa::Client::ServiceData serviceData;
    };

    /**
     * The GS identity input structure contains the fields required to create a GS identity
     * object.
     */
    struct TIEGSIdentityInput
    {
        /**
         * Attribute system of class system GSIdentity.This is the site id of source system.
         */
        std::string system;
        /**
         * Attribute label of class GSIdentity
         */
        std::string label;
        /**
         * Attribute subLabel of of class GSIdentity
         */
        std::string subLabel;
        /**
         * Attribute className of class GSIdentity.This is the className of the Teamcenter BusinessObject
         * for which GSId is being created.
         */
        std::string className;
        /**
         * Attribute split_token of class GSIdentity
         */
        std::string splitToken;
        /**
         * Attribute context of class GSIdentity
         */
        std::string context;
        /**
         * Attribute object_uid of class GSIdentity.This is 14 digit unique identifier.
         */
        std::string objectUid;
        /**
         * Attribute factor_id of class GSIdentity
         */
        std::string factorId;
        /**
         * Attribute atomic of class GSIdentity
         */
        bool atomic;
    };




    /**
     * This operation takes array of GSIdentityInput structure as input and creates GSIdentity
     * objects in Teamcenter. This operation allows for creation of GSIdentities in bulk
     * which is required for GMS co-existence scenarios following bulk load import of legacy
     * data into Teamcenter.Whenever an object is exported from a source site the record
     * of each imported object is stored in GSIdentity object,which has some basic information
     * of the site that owns the object,the type of the class of imported object and 14
     * digit Unique Identifier string (UID) represtening the object.Every imported object
     * will have a corresponding entry in GSIdentity object.This entry will be used later
     * during a re-import or sychronize operations internally by importer module.
     * <br>
     * <br>
     * <b>Use Cases:</b>
     * <br>
     * This operation is used by user to create GSIds for objects imported by bulk loader.It
     * creates GSIds for non GSId based TcXML objects.
     * <br>
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * TcXMLimportexportengine - Capability to import and export XML that follows the TC
     * Business Object Model. No hardcoded transformation is done. Transformations when
     * needed are supported by the mapper component
     *
     * @param gsIdVect
     *        Input to CreateGSIdentities. The GS identity input structure contains the fields
     *        required to create a GS identity object.
     *
     * @return
     *         A list of GS identity object references.Any failure will be returned as partial errors.
     *
     *
     * @exception ServiceException
     *           
     */
    virtual Teamcenter::Services::Globalmultisite::_2011_06::Importexport::CreateGSIdentitiesResponse createGSIdentities ( const std::vector< Teamcenter::Services::Globalmultisite::_2011_06::Importexport::TIEGSIdentityInput >& gsIdVect ) = 0;

    /**
     * This operation takes a hash key as input and generates a valid Teamcenter Unique
     * Identifier  a 14 character long unique string UID based on it. For migrating data
     * from legacy systems to Teamcenter using bulk load import of TC XML, this operation
     * can be used to generate UIDs for legacy objects. The UID is composed by using Fowler
     * Noll Vo (FNV) hash algorithm for an arbitrary and unique input string.
     * <br>
     * <br>
     * <b>Use Cases:</b>
     * <br>
     * This is used during data migration between legacy system such as Enterpise to Teamcenter
     * .
     * <br>
     * Used by the importer to generate a UID.
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * TcXMLimportexportengine - Capability to import and export XML that follows the TC
     * Business Object Model. No hardcoded transformation is done. Transformations when
     * needed are supported by the mapper component
     *
     * @param ownSiteId
     *        The owning site-id or source site Id
     *
     * @param hashKey
     *        The input hash key,arbitary unique input string.
     *
     * @return
     *         A unique hashed uid generated by taking the hash key and site id as input.Any failure
     *         will be returned as partial errors.
     *
     *
     * @exception ServiceException
     *           
     */
    virtual Teamcenter::Services::Globalmultisite::_2011_06::Importexport::GetHashedUIDResponse getHashedUID ( int ownSiteId,
        const std::string&  hashKey ) = 0;


protected:
    virtual ~Importexport() {}
};
            }
        }
    }
}

#include <teamcenter/services/globalmultisite/GlobalMultiSite_undef.h>
#endif

