/* 
 Copyright 2012 Siemens Product Lifecycle Management Software Inc. All Rights Reserved.
 ==================================================
 Copyright 2012
 Siemens Product Lifecycle Management Software Inc.
 All Rights Reserved.
 ==================================================
 Copyright 2012 Siemens Product Lifecycle Management Software Inc. All Rights Reserved.

 ==================================================

   Auto-generated source from service interface.
                 DO NOT EDIT

 ==================================================
*/

#ifndef CPD0_SERVICES_CPDCORE_DATAMANAGEMENTSERVICE_HXX
#define CPD0_SERVICES_CPDCORE_DATAMANAGEMENTSERVICE_HXX

#include <cpd0/services/cpdcore/_2011_06/Datamanagement.hxx>
#include <cpd0/services/cpdcore/_2012_06/Datamanagement.hxx>



#include <teamcenter/soa/client/Connection.hxx>
#include <new> // for size_t
#include <teamcenter/soa/common/MemoryManager.hxx>

#pragma warning ( push )
#pragma warning ( disable : 4996  )

#include <cpd0/services/cpdcore/CpdCore_exports.h>

namespace Cpd0
{
    namespace Services
    {
        namespace Cpdcore
        {
            class DatamanagementService;

/**
 * This service contains operations for creating and editing content within a collaborative
 * design.   Operations are provided for the following:
 * <br>
 * <ul>
 * <li type="disc">Create and update of design elements, design feature, design control
 * elements, and subsets within <b>worksets</b>.
 * </li>
 * <li type="disc">Substitution of design element source objects (and resulting transition
 * of design element category)
 * </li>
 * <li type="disc">Configured navigation of relationships
 * </li>
 * </ul>
 * <br>
 * <br>
 * <br>
 * <b>Library Reference:</b>
 * <ul>
 * <li type="disc">libcpd0soacpdcorestrongmngd.dll
 * </li>
 * <li type="disc">libcpd0soacpdcoretypes.dll (runtime dependency)
 * </li>
 * </ul>
 */

class CPD0SOACPDCORESTRONGMNGD_API DatamanagementService
    : public Cpd0::Services::Cpdcore::_2011_06::Datamanagement,
             public Cpd0::Services::Cpdcore::_2012_06::Datamanagement
{
public:
    static DatamanagementService* getService( Teamcenter::Soa::Client::Connection* );


    /**
     * Creates or updates a set of design control element (<b>Cpd0DesignControlElement</b>)
     * objects and their relations to the design elements and design features that they
     * conntrol.  Design control elements are used to represent welds seams (made up of
     * multiple individual welds), and mechanical routings (such as piping system) which
     * follow a path and are manifested by multiple design elements and design features
     * (welds) that make up the physical implementation of the routing.   Design control
     * elements are related to the design elements and design features they control via
     * a relation (<b>Cpd0ControlModel</b>).
     * <br>
     * Using this API, applications can create and update design control element (and relation)
     * information in bulk, giving better through put that might not otherwise be achieved
     * using standard object create and update API.
     * <br>
     * <br>
     * <b>Cpd0ControlModel</b> relationships have a copy stable ID which is unique within
     * the scope of the design feature.  The copy stable ID can be specified on create;
     * if not specified, they will be automatically generated by Teamcenter.  As their name
     * suggests, when a design feature is copied the connected element relationships are
     * also copied and the copy stable ID of the copied relations remains the same. The
     * copy stable ID is used by external applications, like CAD, to correlate internal
     * data to the related objects.
     * <br>
     * <br>
     * <br>
     * <br>
     * <b>Use Cases:</b>
     * <br>
     * This API supports the design control element authoring use cases. Design control
     * elements (weld seams, mechanical routings, etc.) are authored by users in a CAD application
     * (versus being authored in Teamcenter RAC UI).  When the user directs the CAD system
     * to <i>save</i> their session data, the CAD tool will invoke this API to populate
     * or update the design control element information in the Teamcenter database.
     * <br>
     * Note: standard delete API are used to destroy or obsolete design control elements
     * that are no longer required.
     * <br>
     * Use Case 1: <b>Creation of new design control element </b>
     * <br>
     * The following operation can be used for creating design control element (e.g. weld
     * seams and mechanical routings) in a collaborative design.
     * <br>
     * <ul>
     * <li type="disc">Design control elements are created always in the context of a collaborative
     * design (<b>Cpd0CollaborativeDesign</b>). Generally, in a production environment,
     * a collaborative design will be created ahead of time by an authorized user using
     * the Collaborative Product Development application in Teamcenter RAC UI.  Applications
     * will generally find an existing collaborative design, using the <i>Collaborative
     * Design</i> saved query (provided OOTB in Teamcenter) or through a custom query.
     * </li>
     * <li type="disc">However, for testing purposes, an application may wish to create
     * a collaborative design programmatically. To do this the createObjects operation should
     * be used.
     * </li>
     * <li type="disc">New design control elements can be created using operation createOrUpdateDesignControlElements.
     * The application specifies the business object type for each new design control element,
     * and sets the collaborative design (found or created previously) as its modelObject.
     * Additional property and controlled element information is given and the operation
     * invoked.
     * </li>
     * <li type="disc">Design control elements have a design control element ID which is
     * unique within the system.  Applications can assign their own value using the cpd0design_control_element_id
     * property. If this value is not specified in the input to createOrUpdateDeisgnControlElements,
     * then Teamcenter will automatically assign an ID when it creates a new design control
     * element.
     * </li>
     * <li type="disc">During the operation, the server creates and saves the new design
     * control elements in context of the collaborative design.  It also creates and saves
     * the relationship(<b>Cpd0ControlModel</b>) between the design control element and
     * the design elements and design features it controls. The operation returns the new
     * objects to the caller.
     * </li>
     * </ul>
     * <br>
     * <br>
     * Use Case 2: <b>Update of existing design control element </b>
     * <br>
     * The following operation can be used for updating existing design control element
     * (e.g. weld seams and mechanical routings) in a collaborative design.
     * <br>
     * <ul>
     * <li type="disc">Design control elements are found by the application through search
     * or by navigating from a design element (<b>Cpd0DesignElement</b>) or design feature
     * (<b>Cpd0DesignFeature</b>) via the control model (<b>Cpd0ControlModel</b>) relation.
     * Note: the design control element is always the primary object of the <b>Cpd0ConnectedElement</b>
     * relation and the design element or design feature is always the secondary object.
     * </li>
     * <li type="disc">Existing design control elements can be updated using operation createOrUpdateDesignControlElements.
     * The application specifies which design control elements are to be updated.  Note:
     * the business object type and collaborative design (modelObject) are not set on the
     * input because they are already known to the design control element and cannot be
     * changed.  The application sets changed property values and specifies connected element
     * information for the feature.
     * </li>
     * <li type="disc">During the operation, the server updates and saves the design control
     * elements and adds or removes <b>Cpd0ConnectedElement</b> relations to be consistent
     * with the input.
     * </li>
     * </ul>
     * <br>
     * <br>
     * <b>Dependencies:</b>
     * <br>
     * autoAssignValues, getCreateDesc
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * Collaborative Product Development - Defines data management of 4GD application objects
     * (Design Elements,Design Features,Design Control Elements),defines operations to create
     * and manage Subsets from Collaborative Design and navigation operations for Workset
     * and Subset content.
     *
     * @param elementInfos
     *        The input set of information describing the design control elements to be created
     *        or updated.
     *
     * @return
     *         The response contains a map of input caller specified client ID values and the corresponding
     *         objects that were created/updated features ( String/Business Object reference). The
     *         response also contains a map of caller specified client ID values for (connected
     *         element) relations and their corresponding copy stable ID values. The service data
     *         contains a list of added, updated, or deleted objects and it also contains a list
     *         of any errors which occurred within the call.
     *
     * @deprecated
     *         As of Teamcenter 9.1.1, use the createOrUpdateDesignControlElements operation from
     *         the _2012_06 namespace.
     *
     */
#ifdef WNT
__declspec(deprecated("Deprecated as of Teamcenter 9.1.1, use the createOrUpdateDesignControlElements operation from the _2012_06 namespace."))
#endif
    virtual Cpd0::Services::Cpdcore::_2011_06::Datamanagement::CreateOrUpdateDesignControlElementsResponse createOrUpdateDesignControlElements ( const std::vector< Cpd0::Services::Cpdcore::_2011_06::Datamanagement::DesignControlElementsInfo >& elementInfos ) = 0;

    /**
     * Create or update  Design Elements(<b>Cpd0DesignElement</b>) of categories <i>shape</i>,
     * <i>promissory</i>,  <i>reuse</i>  and <i>subordinate</i>  in an application  model
     * (Cpd0CollaborativeDesign) based on input structure.
     * <br>
     * Creation of new <i>shape</i> design elements includes creation of new <code>ShapeDesign</code>
     * and <code>ShapeDesignRevision</code> objects. Creation of <i>reuse</i> design element
     * forces creation of <i>subordinate</i> design elements if the source item revision
     * has structure.  Position and effectivity information for new or updated design elements
     * can be set using this operation.
     * <br>
     * <br>
     * <br>
     * <b>Use Cases:</b>
     * <br>
     * A design element represents the use of a standard part design, a design component,
     * or a design assembly in a product. Design elements may be created by CAD applications
     * or directly in the Teamcenter RAC UI using the Collaborative Product Development
     * application.
     * <br>
     * Design elements fall into one of the following categories:
     * <br>
     * <br>
     * <i>shape</i> design element
     * <br>
     * The shape element represents a product specific design or other model specific design
     * shape. A shape design element may become a reuse design element if the business standardizes
     * on an existing product specific design. This change of purpose does not change the
     * identity of the design element or affect its revision history.
     * <br>
     * <br>
     * <i>reuse</i> design element
     * <br>
     * The reuse design element represents an instance of a component or assembly (e.g.
     * standard part) in a collaborative design.
     * <br>
     * <br>
     * <i>subordinate</i> design element
     * <br>
     * The subordinate design element is created as the result of a <i>reuse</i> design
     * element, when the source object has structure.
     * <br>
     * <br>
     * <i>promissory</i> design element
     * <br>
     * The promissory design element is a placeholder that can later becomes a <i>reuse</i>
     * or <i>shape</i>  design element.  A <i>promissory</i> design element does not have
     * a source object.
     * <br>
     * <br>
     * This API supports the design element authoring use cases. When the user directs the
     * CAD system to <i>save</i> their session data, the CAD tool will invoke this API to
     * populate or update the design element information in the Teamcenter database.
     * <br>
     * Note: standard delete API are used to destroy or obsolete design elements that are
     * nolonger required.
     * <br>
     * <br>
     * <br>
     * <br>
     * Use Case 1: <b>Creation of new design elements </b>
     * <br>
     * Precondition: Any assembly to be realized into collaborative design (as a reuse)
     * must have a precise structure.
     * <br>
     * <br>
     * The following operation can be used for creating design element in a collaborative
     * design.
     * <br>
     * <br>
     * <ul>
     * <li type="disc">Design elements are always created in the context of a collaborative
     * design (<b>Cpd0CollaborativeDesign</b>). Generally, in a production environment,
     * a collaborative design will be created ahead of time by an authorized user using
     * the Collaborative Product Development application in Teamcenter RAC UI.  Applications
     * will generally find an existing collaborative design, using the <i>Collaborative
     * Design</i> saved query (provided OOTB in Teamcenter) or through a custom query.
     * </li>
     * <li type="disc">However, for testing purposes, an application may wish to create
     * a collaborative design programmatically.To do this the <code>createObjects</code>
     * operation should be used.
     * </li>
     * <li type="disc">New design elements can be created using operation <code>createOrUpdateDesignElements</code>.
     * The application specifies the business object type for each new design element, and
     * sets the collaborative design (found or created previously) as its modelObject.
     * Additional property and positional element information is given and the operation
     * invoked.
     * </li>
     * <li type="disc">Design elements have a design element ID which is unique within the
     * system. Applications can assign their own value using the <code>cpd0design_element_id</code>
     * property. If this value is not specified in the input to <code>createOrUpdateDesignElements</code>,
     * then Teamcenter will automatically assign an ID when it creates a new design control
     * element.
     * </li>
     * <li type="disc">During the operation, the server creates and saves the new design
     * elements in context of the collaborative design. The operation returns the new objects
     * to the caller.
     * </li>
     * </ul>
     * <br>
     * <br>
     * <br>
     * Use Case 2: <b>Update of existing design element </b>
     * <br>
     * The following operation can be used for updating existing design element in a collaborative
     * design.
     * <br>
     * <br>
     * <ul>
     * <li type="disc">Design elements are found by the application through search.
     * </li>
     * <li type="disc">Existing design elements can be updated using operation <code>createOrUpdateDesignElements</code>.
     * The application specifies which design elements are to be updated.  Note: the business
     * object type and collaborative design (modelObject) are not set on the input because
     * they are already known to the design element and cannot be changed.
     * </li>
     * <li type="disc">The application sets changed property values.
     * </li>
     * <li type="disc">During the <code>createOrUpdateDesignElements</code> operation, the
     * server updates and saves the design elements along with its auxilliary objects if
     * any.
     * </li>
     * </ul>
     * <br>
     * <br>
     * <b>Dependencies:</b>
     * <br>
     * autoAssignValues, getCreateDesc
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * Collaborative Product Development - Defines data management of 4GD application objects
     * (Design Elements,Design Features,Design Control Elements),defines operations to create
     * and manage Subsets from Collaborative Design and navigation operations for Workset
     * and Subset content.
     *
     * @param input
     *        This Input contains a set of design elements to be created or updated. The design
     *        elements could be of category <i>shape</i>, <i>reuse</i>, <i>subordinate</i> or <i>promissory</i>
     *        based on arguments populated in the input structure (<code>CreateOrUpdateDesignElementInfo</code>).
     *        The same information is used to create or update initial values on design elements
     *        and related objects
     *        <br>
     *        <br>
     *        The inputs are separated based on category of design elements. For example, inorder
     *        to create a <i>promissory</i> design element, it is expected to populate <code>PromissoryDesignElementInfo</code>,
     *        similarly with other categories of design elements.
     *        <br>
     *        <br>
     *        As explained in the above listed structures,
     *        <br>
     *        <ul>
     *        <li type="disc"><code>ShapeDesignElementInfo</code> is to create or update <i>shape</i>
     *        design elements.
     *        </li>
     *        <li type="disc"><code>PromissoryDesignElementInfo</code> is to create or update <i>promissory</i>
     *        design elements.
     *        </li>
     *        <li type="disc"><code>ReuseDesignElementInfo</code> is to create or update <i>reuse</i>
     *        and <i>subordinate</i> design elements.
     *        </li>
     *        </ul>
     *
     * @return
     *         It contains a map of input client ID to the objects that were created or updated.
     *         It also returns a map of returned <i>subordinates</i>; where key is <i>reuse</i>
     *         design elements and value is a vector of <i>subordinate</i> design elements. Number
     *         of subordinates returned is governed by the <code>levelsOfSubordinatesToReturn</code>
     *         value specified on input for each <i>reuse</i> design elements. It also returns
     *         <code>ShapeDesign</code> and <code>ShapeDesignRevision</code> pair of objects for
     *         those newly created.
     *
     */
    virtual Cpd0::Services::Cpdcore::_2011_06::Datamanagement::CreateOrUpdateDesignElementsResponse createOrUpdateDesignElements ( const Cpd0::Services::Cpdcore::_2011_06::Datamanagement::CreateOrUpdateDesignElementsInfo&  input ) = 0;

    /**
     * Creates or updates a list of design feature (<b>Cpd0DesignFeature</b>) objects and
     * their relations to the design elements they connect.  Design features are used to
     * represent welds (arc and spot), adhesive beads, etc.   Design features are related
     * to the design elements they connect via a relation (<b>Cpd0ConnectedElement</b>).
     * <br>
     * <br>
     * Using this API, applications can create and update design feature information in
     * bulk, giving better through put that might not otherwise be achieved using standard
     * object create and update API.
     * <br>
     * 
     * <br>
     * <b>Cpd0ConnectedElement</b> relationships have a copy stable ID which is unique within
     * the scope of the design feature.  The copy stable ID can be specified on create;
     * if not specified, they will be automatically generated by Teamcenter.  As their name
     * suggests, when a design feature is copied the connected element relationships are
     * also copied and the copy stable ID of the copied relations remains the same.  The
     * copy stable ID is used by external applications, like CAD, to correlate internal
     * data to the related items.
     * <br>
     * <br>
     * <br>
     * <b>Use Cases:</b>
     * <br>
     * This API supports the design feature authoring use cases.   Design features (welds,
     * etc.) are authored by users in a CAD application (versus being authored in Teamcenter
     * RAC UI).  When the user directs the CAD system to <i>save</i> their session data,
     * the CAD tool will invoke this API to populate or update the design feature information
     * in the Teamcenter database.
     * <br>
     * Note: standard delete API are used to destroy or obsolete design features that are
     * no longer required.
     * <br>
     * Use Case 1: <b>Creation of new design feature </b>
     * <br>
     * <br>
     * The following operation can be used for creating design features (e.g. welds) in
     * a collaborative design.
     * <br>
     * <ul>
     * <li type="disc">Design features are  created always in the context of a collaborative
     * design (Cpd0CollaborativeDesign. Generally, in a production environment, a collaborative
     * design will be created ahead of time by an authorized user using the Collaborative
     * Product Development application in Teamcenter RAC UI. Applications will generally
     * find an existing collaborative design, using the <i>Collaborative Design</i> saved
     * query (provided OOTB in Teamcenter) or through a custom query.
     * </li>
     * <li type="disc">However, for testing purposes, an application may wish to create
     * a collaborative design programmatically. To do this the <code>createObjects</code>
     * operation should be used.
     * </li>
     * <li type="disc">New design features can be created using operation <code>createOrUpdateDesignFeatures</code>.
     * The application specifies the business object type for each new design feature, and
     * sets the collaborative design (found or created previously) as its modelObject. Additional
     * property and connected element information is given and the operation invoked.
     * </li>
     * <li type="disc">Design features have a design feature ID which is unique within the
     * system. Applications can assign their own value using the <code>cpd0design_feature_id</code>
     * property.  If this value is not specified in the input to <code>createOrUpdateDesignFeatures</code>,
     * then Teamcenter will automatically assign an ID when it creates of new design feature.
     * </li>
     * <li type="disc">During the operation, the server creates and saves the new design
     * features in context of the collaborative design. It also creates and saves the relationship
     * between the design features and their connected design elements. The operation returns
     * the new objects to the caller.
     * </li>
     * </ul>
     * <br>
     * <br>
     * Use Case 2:<b> Update of existing design feature</b>
     * <br>
     * <br>
     * The following operation can be used for updating existing design features (e.g.
     * welds) in a collaborative design.
     * <br>
     * <ul>
     * <li type="disc">Design features are found by the application through search or by
     * navigating from a design element (<b>Cpd0DesignElement</b>) via the connected element
     * (<b>Cpd0ConnectedElement</b>) relation.  Note: the design feature is always the primary
     * object of the Cpd0ConnectedElement relation and the design element is always the
     * secondary object.
     * </li>
     * <li type="disc">The existing design features can be updated using operation <code>createOrUpdateDesignFeatures</code>.
     * The application specifies which design features are to be updated.  Note: the business
     * object type and collaborative design (<code>modelObject</code>) are not set on the
     * input because they are already know to the design feature and cannot be changed.
     * The application sets changed property values and specifies connected element information
     * for the feature.
     * </li>
     * <li type="disc">During the operation, the server updates and saves the design features
     * and adds or removes <code>Cpd0ConnectedElement</code> relations to be consistent
     * with the input..
     * </li>
     * </ul>
     * <br>
     * <br>
     * <b>Dependencies:</b>
     * <br>
     * autoAssignValues, getCreateDesc
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * Collaborative Product Development - Defines data management of 4GD application objects
     * (Design Elements,Design Features,Design Control Elements),defines operations to create
     * and manage Subsets from Collaborative Design and navigation operations for Workset
     * and Subset content.
     *
     * @param featureInfos
     *        The input list of design feature information describing the features to be created
     *        or updated.
     *
     * @return
     *         The response contains a map of input caller specified client ID values and the corresponding
     *         objects that were created/updated features. The response also contains a map of caller
     *         specified client ID values for (connected element) relations and their corresponding
     *         copy stable ID values. The service data contains a list of added, updated, or deleted
     *         objects and it also contains a list of any errors which occurred within the call.
     *
     */
    virtual Cpd0::Services::Cpdcore::_2011_06::Datamanagement::CreateOrUpdateDesignFeaturesResponse createOrUpdateDesignFeatures ( const std::vector< Cpd0::Services::Cpdcore::_2011_06::Datamanagement::DesignFeatureInfo >& featureInfos ) = 0;

    /**
     * This operation is used to create or update workset Subset and Design Subset Elements
     * (<b>Cpd0DesignSubsetElements</b>) in a workset (<b>Cpd0Workset</b>). A Workset acts
     * as a collector of design elements (<b>Cpd0DesignElements</b>) instantiated from one
     * or more Collaborative Designs (<b>Cpd0CollaborativeDesigns</b>). It allows creating
     * local copies of  workset subsets to update. It can contain subsets or item assemblies
     * as its direct children. The subset design element content is precise and Teamcenter
     * does not automatically update it with changes to the source data.
     * <br>
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
     * <br>
     * The elements to be appended or removed to/from the Workset subset can be either an
     * explicit list of elements or results from a Recipe.
     * <br>
     * <br>
     * When a designelement from a Collaborative Design is realized into a subset in a
     * <br>
     * workset, the same design element is referenced in both the Collaborative Design and
     * <br>
     * the workset. Changes made to this design element in a workset are visible in
     * <br>
     * the Collaborative Design and vice versa.
     * <br>
     * <br>
     * Once workset subset is created using this operation, Realization Service operation
     * like <code>updateWorksetSubsetContent</code> can be used to update workset subset
     * content.
     * <br>
     * <br>
     * <br>
     * <br>
     * <b>Use Cases:</b>
     * <br>
     * A design subset element is used to represent a subset of collaborative design in
     * a workset. Design elements  may be created by CAD applications or directly in the
     * Teamcenter RAC UI using the Collaborative Product Development application.
     * <br>
     * <br>
     * This API supports the workset authoring use cases. When the user directs the CAD
     * system to <i>save</i> their session data, the CAD tool will invoke this API to populate
     * or update the design subset element information in the Teamcenter database.  Similary
     * RAC will call this API when search results or subset definitions are added to a workset.
     * <br>
     * Note: standard delete API are used to destroy or obsolete design subset elements
     * that are no longer required in the workset revision.
     * <br>
     * <br>
     * Use Case 1:<b> Creation of new design subset elements </b>
     * <br>
     * <br>
     * Pre condition:  Design elements or design features exist in a collaborative design.
     * A workset revision has been created or found in Teamcenter.
     * <br>
     * The following operation can be used for creating design subset elements in a workset.
     * <br>
     * <ul>
     * <li type="disc">Design subset elements are always created in the context of a workset
     * revison (<b>Cpd0WorksetRevision</b>).  Users can create a new workset or open an
     * existing workset in a CAD tool or in the Collaborative Product Development application
     * in the RAC User Interface.
     * </li>
     * <li type="disc">However, for testing purposes, an application may wish to create
     * a workset programmatically.To do this the <code>createObjects</code> operation should
     * be used.
     * </li>
     * <li type="disc">New design subset elements can be created using the createOrUpdateDesignSubsetElements
     * operation. The application specifies a workset revision which will contain the design
     * subset element.Optionally, the application can specify a <b>BOMView</b> type; if
     * none is specified the system will use the default BOM view type.
     * </li>
     * <li type="disc">After the design subset element is created, the application may save
     * a search recipe on the subset using the <code>setRecipes</code> operation.
     * </li>
     * </ul>
     * <br>
     * <br>
     * Use Case 2: <b>Update of existing design subset element </b>
     * <br>
     * <br>
     * The following operation can be used for updating an existing design subset element
     * in a workset
     * <br>
     * <ul>
     * <li type="disc">Design subset elements are found by the application by expanding
     * a workset (see <code>startStructureExpand</code> operation).
     * </li>
     * <li type="disc">Design subset elements can be updated using the <code>createOrUpdateDesignSubsetElements</code>
     * operation.  The application specifies which design subset elements are to be updated.
     * Note: the business object type, workset revision, and BOM view type are not set
     * on the input because they are already known to the design subset element and cannot
     * be changed.
     * </li>
     * <li type="disc">The application sets changed property values.
     * </li>
     * <li type="disc">During the <code>createOrUpdateDesignElements</code> operation, the
     * server updates and saves the design elements along with its auxiliary objects if
     * any.
     * </li>
     * </ul>
     * <br>
     * Note: The search recipe on design subset elements is normally changed using the <code>setRecipes</code>
     * operation. The <code>createOrUpdateDesignElements</code> supports limited recipe
     * modification indirectly by adding lists of design elements for inclusion or exclusion
     * from the current search recipe stored on the design subset element.
     * <br>
     * <br>
     * <b>Dependencies:</b>
     * <br>
     * createOrUpdateDesignElements, updateWorksetSubsetContent
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * Collaborative Product Development - Defines data management of 4GD application objects
     * (Design Elements,Design Features,Design Control Elements),defines operations to create
     * and manage Subsets from Collaborative Design and navigation operations for Workset
     * and Subset content.
     *
     * @param subsetInfos
     *        Data on <code>DesignSubsetElementInfo</code> used to create or update <code>DesignSubsetElements</code>
     *        in a workset.
     *
     * @return
     *         A list of <code>DesignSubsetElementData</code> which is one to one correspondence
     *         with input <code>subsetInfos</code>.
     *
     */
    virtual Cpd0::Services::Cpdcore::_2011_06::Datamanagement::CreateOrUpdateDesignSubsetElementsResponse createOrUpdateDesignSubsetElements ( const std::vector< Cpd0::Services::Cpdcore::_2011_06::Datamanagement::DesignSubsetElementInfo >& subsetInfos ) = 0;

    /**
     * Query, filter, and configure all primary objects attached to the given input set
     * of secondary objects.  Filter criteria are provided through the <code>RelatedObjectInput</code>
     * construct.  Filtering can be based on the type of the relation, the type of the related
     * object, and relation attribute values.  Configuration conditions are specified by
     * a <b>ConfigurationContext</b> object, which provides revision and unit effectivity
     * rule information.
     * <br>
     * Returned objects are configured by the given configuration context and are access
     * checked before being returned. An empty vector of <code>RelatedObjectInput</code>
     * results in an invalid input exception being thrown.
     * <br>
     * <b>RESTRICTION</b>:  Currently this API is only supported for navigation of <b>Mdl0CopyStableRelation</b>
     * and its subtypes.
     * <br>
     * <br>
     * <br>
     * <br>
     * <b>Use Cases:</b>
     * <br>
     * This API supports configured navigation of relationship. Some applications, such
     * as CAD tools, need to navigate relationships and return results only if they match
     * certain configuration criteria. An example is the navigation from a design element
     * to a design control element.  A design element  may be related to multiple revisions
     * of a design control element, however within a configured view of the system, only
     * one of the design control elements may actually be relevant.  This API helps find
     * the primary object (e.g. <b>Cpd0DesignControlElement</b>) of a relation (e.g. <b>Cpd0ControlModel</b>)
     * given a secondary object (e.g. <b>Cpd0DesignElement</b>).
     * <br>
     * <br>
     * Use Case 1: <b>Navigate to Configured Design Control Elements from Design Element
     * </b>
     * <br>
     * <br>
     * <ul>
     * <li type="disc">Perform a configured search to find design elements (<b>Cpd0DesignElement</b>)
     * in a collaborative design
     * </li>
     * <li type="disc">Using operation <code>queryRelatedPrimaryObjects</code> to find the
     * design control elements (<b>Cpd0DesignControlElement</b>) that are related to the
     * found design elements and match the same configuration criteria used to find the
     * design elements.
     * </li>
     * </ul>
     * <br>
     * Use Case 2: <b>Navigate to Configured Design Features from Design Element </b>
     * <br>
     * <br>
     * <ul>
     * <li type="disc">Perform a configured search to find design elements (<b>Cpd0DesignElement</b>)
     * in a collaborative design
     * </li>
     * <li type="disc">Using operation queryRelatedPrimaryObjects to find the design features
     * (<b>Cpd0DesignFeature</b>) that are related (via <b>Cpd0ConnectedElement</b>) to
     * the found design elements and match the same configuration criteria used to find
     * the design elements.
     * </li>
     * </ul>
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * Collaborative Product Development - Defines data management of 4GD application objects
     * (Design Elements,Design Features,Design Control Elements),defines operations to create
     * and manage Subsets from Collaborative Design and navigation operations for Workset
     * and Subset content.
     *
     * @param configurationContext
     *        Configuration criteria to apply to the filtered set of related primary objects.
     *        Objects not satisfying the configuration criteria will not be returned.
     *
     * @param inputObjects
     *        A set of secondary objects and the filter criteria.
     *
     * @return
     *         A set of objects that are access checked before being returned. An empty list of
     *         <code>RelatedObjectInput</code> results in an invalid input exception being thrown.
     *
     */
    virtual Cpd0::Services::Cpdcore::_2011_06::Datamanagement::RelatedObjectsResponse queryRelatedPrimaryObjects ( Teamcenter::Soa::Common::AutoPtr<Teamcenter::Soa::Client::Model::ConfigurationContext>  configurationContext,
        const std::vector< Cpd0::Services::Cpdcore::_2011_06::Datamanagement::RelatedObjectInput >& inputObjects ) = 0;

    /**
     * Query, filter, and configure all secondary objects attached to the given input set
     * of primary objects.  Filter criteria are provided through the <code>RelatedObjectInput</code>
     * construct.  Filtering can be based on the type of the relation, the type of the related
     * object, and relation property values. Configuration conditions are specified by a
     * <b>ConfigurationContext</b> object, which provides revision and unit effectivity
     * rule information.
     * <br>
     * Returned objects are configured by the given configuration context and are access
     * checked before being returned. An empty vector of <code>RelatedObjectInput</code>
     * results in an invalid input exception being thrown.
     * <br>
     * <b>RESTRICTION</b>:  Currently this API is only supported for navigation of <b>Mdl0CopyStableRelation</b>
     * and its subtypes.
     * <br>
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * Collaborative Product Development - Defines data management of 4GD application objects
     * (Design Elements,Design Features,Design Control Elements),defines operations to create
     * and manage Subsets from Collaborative Design and navigation operations for Workset
     * and Subset content.
     *
     * @param configurationContext
     *        Configuration criteria to apply to the filtered set of related secondary objects.
     *        Objects not satisfying the configuration criteria will not be returned.
     *
     * @param inputObjects
     *        A set of primary objects and the filter criteria.
     *
     * @return
     *         A set of objects that are access checked before being returned. An empty list of
     *         <code>RelatedObjectInput</code> results in an invalid input exception being thrown.
     *         <br>
     *         <br>
     *         <b>NOTE</b>:  The input and response for this operation are identical to <code>getRelatedPrimaryObject</code>.
     *         The only difference between the operations is the direction of navigation across
     *         the relationship.  Please see <code>getRelatedPrimaryObject</code> documentation
     *         for a detailed description of <code>RelatedObjectInput</code> and <code>RelatedObjectsResponse</code>.
     *         <br>
     *
     */
    virtual Cpd0::Services::Cpdcore::_2011_06::Datamanagement::RelatedObjectsResponse queryRelatedSecondaryObjects ( Teamcenter::Soa::Common::AutoPtr<Teamcenter::Soa::Client::Model::ConfigurationContext>  configurationContext,
        const std::vector< Cpd0::Services::Cpdcore::_2011_06::Datamanagement::RelatedObjectInput >& inputObjects ) = 0;

    /**
     * Transforms an existing <i>shape</i> or <i>promissory</i> Design Elements (<b>Cpd0DesignElement</b>
     * or its subclasses) to <i>reuse</i> Design Elements (<b>Cpd0DesignElement</b> or its
     * subtypes).This operation doesnt replace the existing Design Element business object
     * reference with a new one rather, changes category to <i>reuse</i>.The business object
     * reference still remains the same. In other words, the object identity (UID) and the<code>
     * cpd0design_element_id</code> property value on Design Element remain the same after
     * the substitution.
     * <br>
     * <br>
     * <b>Use Cases:</b>
     * <br>
     * Use Case 1: This operation can be used when a <i>promissory</i> Design Element is
     * to be transformed into a <i>reuse</i> Design Element.
     * <br>
     * Use Case 2: This operation can be used when a <i>shape</i> Design Element is to be
     * transformed into a <i>reuse</i> Design Element.
     * <br>
     * <br>
     * <br>
     * <b>Dependencies:</b>
     * <br>
     * createOrUpdateDesignElements
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * Collaborative Product Development - Defines data management of 4GD application objects
     * (Design Elements,Design Features,Design Control Elements),defines operations to create
     * and manage Subsets from Collaborative Design and navigation operations for Workset
     * and Subset content.
     *
     * @param substituteInfos
     *        substituteInfos: A vector of <b>ReuseDesignElementInfo</b> structures. Each structure
     *        specifies the Design Element to be substituted. Each would have inputs on Item Revision
     *        to be realized for substitution.
     *
     * @return
     *         <code>SubstituteAsReuseDesignElementResponse</code> contains a map of client id (provided
     *         in input) to the reuse Design Element. It has Service Data with created/updated/deleted
     *         objects along with any partial errors.
     *         <br>
     *         <br>
     *
     */
    virtual Cpd0::Services::Cpdcore::_2011_06::Datamanagement::SubstituteAsReuseDesignElementResponse substituteAsReuseDesignElement ( const std::vector< Cpd0::Services::Cpdcore::_2011_06::Datamanagement::ReuseDesignElementInfo >& substituteInfos ) = 0;

    /**
     * Transforms an existing <i>reuse</i> or <i>promissory</i> design elements ( <b>Cpd0DesignElement</b>
     * or its subtypes) to <i>shape</i> design elements ( <b>Cpd0DesignElement</b> or its
     * subtypes) .Substitute operation doesnt replace the existing design element with a
     * new one. The existing design element gets morphed. The category is changed from <i>reuse</i>
     * (or <i>promissory</i>) to <i>shape</i>. In other words, the object identity (UID)
     * and the cpd0design_element_id property value on Design Element remain the same after
     * the substitution.
     * <br>
     * <br>
     * <b>Use Cases:</b>
     * <br>
     * Use Case 1: This operation can be used when a <i>promissory</i> Design Element is
     * to be transformed into a <i>shape</i> Design Element.
     * <br>
     * Use Case 2: This operation can be used when a <i>reuse</i> Design Element is to be
     * transformed into a <i>shape</i> Design Element. In this case any of its <i>subordinate</i>
     * Design Elements are discarded as part of the substitution.
     * <br>
     * <br>
     * <br>
     * <b>Dependencies:</b>
     * <br>
     * createOrUpdateDesignElements
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * Collaborative Product Development - Defines data management of 4GD application objects
     * (Design Elements,Design Features,Design Control Elements),defines operations to create
     * and manage Subsets from Collaborative Design and navigation operations for Workset
     * and Subset content.
     *
     * @param substituteInfos
     *        A list of <code>ShapeDesignElementInfo</code> structures. Each structure specifies
     *        the Design Element to substitute and also the new shape information for the substitution.
     *
     * @return
     *         SubstituteAsShapeDesignElementResponse contains a map of client id (provided in input)
     *         to the Shape Design Element. It has a map of Shape Design Elements to the corresponding
     *         Shape Design and Shape Design Revision objects. It has Service Data with created/updated/deleted
     *         objects along with any partial errors.
     *
     */
    virtual Cpd0::Services::Cpdcore::_2011_06::Datamanagement::SubstituteAsShapeDesignElementResponse substituteAsShapeDesignElement ( const std::vector< Cpd0::Services::Cpdcore::_2011_06::Datamanagement::ShapeDesignElementInfo >& substituteInfos ) = 0;

    /**
     * Creates or updates a set of design control element (<b>Cpd0DesignControlElement</b>)
     * objects and their relations to the design elements and design features that they
     * conntrol.  Design control elements are used to represent welds seams (made up of
     * multiple individual welds), and mechanical routings (such as piping system) which
     * follow a path and are manifested by multiple design elements and design features
     * (welds) that make up the physical implementation of the routing.   Design control
     * elements are related to the design elements and design features they control via
     * a relation (<b>Cpd0ControlModel</b>).
     * <br>
     * Using this API, applications can create and update design control element (and
     * relation) information in bulk, giving better through put that might otherwise be
     * achieved using standard object create and update API.
     * <br>
     * <b>Cpd0ControlModel</b> relationships have a copy-stable ID which is unique within
     * the scope of the design feature.  The copy-stable ID can be specified on create;
     * if not specified, they will be automatically generated by Teamcenter.  As their name
     * suggests, when a design feature is copied the connected element relationships are
     * also copied and the copy-stable ID of the copied relations remains the same.  The
     * copy-stable ID is used by external applications, like CAD, to correlate internal
     * data to the related objects.@param elementInfos The input set of information describing
     * the design control elements to be created or updated.@return response containing
     * maps of input information to the created/updated objects (see description of CreateOrUpdateDesignControlElementsResponse
     * for more details).
     * <br>
     * <br>
     * <b>Use Cases:</b>
     * <br>
     * This API supports the design control element authoring use cases. Design control
     * elements (weld seams, mechanical routings, etc.) are authored by users in a CAD application
     * (versus being authored in Teamcenter RAC UI).  When the user directs the CAD system
     * to save their session data, the CAD tool will invoke this API to populate or update
     * the design control element information in the Teamcenter database.
     * <br>
     * Note: standard delete API are used to destroy or obsolete design control elements
     * that are no longer required.
     * <br>
     * Use Case 1: Creation of new design control element
     * <br>
     * The following operation can be used for creating design control element (e.g. weld
     * seams and mechanical routings) in a collaborative design.
     * <br>
     * Design control elements are created always in the context of a collaborative design
     * (Cpd0CollaborativeDesign). Generally, in a production environment, a collaborative
     * design will be created ahead of time by an authorized user using the Collaborative
     * Product Development application in Teamcenter RAC UI.  Applications will generally
     * find an existing collaborative design, using the Collaborative Design saved query
     * (provided OOTB in Teamcenter) or through a custom query.
     * <br>
     * However, for testing purposes, an application may wish to create a collaborative
     * design programmatically. To do this the createObjects operation should be used.
     * <br>
     * New design control elements can be created using operation createOrUpdateDesignControlElements.
     * The application specifies the business object type for each new design control element,
     * and sets the collaborative design (found or created previously) as its modelObject.
     * Additional property and controlled element information is given and the operation
     * invoked.
     * <br>
     * Design control elements have a design control element ID which is unique within the
     * system.  Applications can assign their own value using the cpd0design_control_element_id
     * property. If this value is not specified in the input to createOrUpdateDeisgnControlElements,
     * then Teamcenter will automatically assign an ID when it creates a new design control
     * element.
     * <br>
     * During the operation, the server creates and saves the new design control elements
     * in context of the collaborative design.  It also creates and saves the relationship(Cpd0ControlModel)
     * between the design control element and the design elements and design features it
     * controls. The operation returns the new objects to the caller.
     * <br>
     * <br>
     * Use Case 2: Update of existing design control element
     * <br>
     * The following operation can be used for updating existing design control element
     * (e.g. weld seams and mechanical routings) in a collaborative design.
     * <br>
     * Design control elements are found by the application through search or by navigating
     * from a design element (Cpd0DesignElement) or design feature (Cpd0DesignFeature) via
     * the control model (Cpd0ControlModel) relation.  Note: the design control element
     * is always the primary object of the Cpd0ConnectedElement relation and the design
     * element or design feature is always the secondary object.
     * <br>
     * Existing design control elements can be updated using operation createOrUpdateDesignControlElements.
     * The application specifies which design control elements are to be updated.  Note:
     * the business object type and collaborative design (modelObject) are not set on the
     * input because they are already known to the design control element and cannot be
     * changed.  The application sets changed property values and specifies connected element
     * information for the feature.
     * <br>
     * During the operation, the server updates and saves the design control elements and
     * adds or removes Cpd0ConnectedElement relations to be consistent with the input.
     * <br>
     * <br>
     * <b>Dependencies:</b>
     * <br>
     * autoAssignValues, getCreateDesc
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * Collaborative Product Development - Defines data management of 4GD application objects
     * (Design Elements,Design Features,Design Control Elements),defines operations to create
     * and manage Subsets from Collaborative Design and navigation operations for Workset
     * and Subset content.
     *
     * @param elementInfos
     *        The input set of information describing the design control elements to be created
     *        or updated.
     *
     * @return
     *         The response contains a map of input caller specified client ID values and the corresponding
     *         <tt>CreateOrUpdateDesignControlElementOutput</tt>. The service data contains a list
     *         of added, updated, or deleted objects and it also contains a list of any errors which
     *         occurred within the call.  See the description of <tt>CreateOrUpdateDesignControlElementsResponse2</tt>
     *         for additional details.
     *
     */
    virtual Cpd0::Services::Cpdcore::_2012_06::Datamanagement::CreateOrUpdateDesignControlElementsResponse2 createOrUpdateDesignControlElements2 ( const std::vector< Cpd0::Services::Cpdcore::_2011_06::Datamanagement::DesignControlElementsInfo >& elementInfos ) = 0;

    /**
     * Transforms an existing reuse or promissory design elements ( <b>Cpd0DesignElement</b>
     * or its subtypes) to shape design elements ( <b>Cpd0DesignElement</b> or its subtypes)
     * .Substitute operation doesnt replace the existing design element with a new one.
     * The existing design element gets morphed. The category is changed from reuse (or
     * promissory) to shape. In other words, the object identity (UID) and the <b>cpd0design_element_id</b>
     * property value on Design Element remain the same after the substitution.
     * <br>
     * <br>
     * <b>Use Cases:</b>
     * <br>
     * Use Case 1: This operation can be used when a promissory Design Element is to be
     * transformed into a shape Design Element.
     * <br>
     * Use Case 2: This operation can be used when a reuse Design Element is to be transformed
     * into a shape Design Element. In this case any of its subordinate Design Elements
     * are discarded as part of the substitution.
     * <br>
     * <br>
     * <br>
     * <b>Dependencies:</b>
     * <br>
     * createOrUpdateDesignControlElements2
     * <br>
     * <br>
     * <b>Teamcenter Component:</b>
     * <br>
     * Collaborative Product Development - Defines data management of 4GD application objects
     * (Design Elements,Design Features,Design Control Elements),defines operations to create
     * and manage Subsets from Collaborative Design and navigation operations for Workset
     * and Subset content.
     *
     * @param substituteInfos
     *        A vector of ReuseDesignElementInfo structures. Each structure specifies the Design
     *        Element to be substituted. Each would have inputs on Item Revision to be realized
     *        for substitution.
     *
     * @return
     *         SubstituteAsShapeDesignElementResponse contains a map of client id (provided in input)
     *         to the Shape Design Element. It has a map of Shape Design Elements to the corresponding
     *         Shape Design and Shape Design Revision objects. It has Service Data with created/updated/deleted
     *         objects along with any partial errors.
     *
     */
    virtual Cpd0::Services::Cpdcore::_2012_06::Datamanagement::SubstituteAsReuseDesignElementResponse substituteAsReuseDesignElement2 ( const std::vector< Cpd0::Services::Cpdcore::_2011_06::Datamanagement::ReuseDesignElementInfo >& substituteInfos ) = 0;


    SOA_CLASS_NEW_OPERATORS_WITH_IMPL("DatamanagementService")

};
        }
    }
}


#pragma warning ( pop )

#include <cpd0/services/cpdcore/CpdCore_undef.h>
#endif

