/*==============================================================================
                Copyright (c) 2003-2005 UGS Corporation
                   Unpublished - All Rights Reserved
 ==============================================================================*/

/**
    @file

    This file contains the publish identifiers of error codes that can be
    generated by this module. Obtaining and using the numeric values of these
    manifest constants is not supported. We reserve the right to change the
    actual values as necessary.
*/

/*  */

#ifndef VMS_ERRORS_H
#define VMS_ERRORS_H

#include <common/emh_const.h>
#include <vm/libvm_exports.h>

/**
    @defgroup VMS_ERRORS VMS Errors
    @ingroup VMS
    @{
*/

#define VMS_initialization_failed              (EMH_VMS_error_base + 2)
#define VMS_unable_to_delete                   (EMH_VMS_error_base + 4)
#define VMS_unable_to_find                     (EMH_VMS_error_base + 6)
#define VMS_duplicate_id                       (EMH_VMS_error_base + 9)
#define VMS_invalid_null_tag                   (EMH_VMS_error_base + 13)
#define VMS_cannot_add_to_structure            (EMH_VMS_error_base +  15)
#define VMS_item_id_too_large                  (EMH_VMS_error_base +  16)
#define VMS_invalid_release_status             (EMH_VMS_error_base +  18)
#define VMS_commercial_part_no_write_access    (EMH_VMS_error_base +  20)
#define VMS_invalid_location_for_vendor_part   (EMH_VMS_error_base +  21)
#define VMS_invalid_change_vendor_input        (EMH_VMS_error_base +  22)
#define VMS_duplicate_lineitems                (EMH_VMS_error_base +  23)
#define VMS_invalid_vendor_id_input            (EMH_VMS_error_base +  24)
/**
    The object "%1$" cannot be added to a BOM structure as a child node of the Vendor Part "%2$", because Vendor Parts will be always a leaf node in a BOM structure.
*/
#define VMS_vendor_part_not_allowed_as_child_to_another_vendor_part ( EMH_VMS_error_base + 25 )
/**
    The Vendor Part "%1$" cannot be added to a BOM structure, because it is not related to any Commercial Part using the Vendor Representation relation.
*/
#define VMS_vendor_part_not_related_to_commercial_part              ( EMH_VMS_error_base + 26 )

/**
   A Part name must be provided to create the Vendor Part.
*/
#define VMS_invalid_vendor_part_name                                ( EMH_VMS_error_base + 28 )

/**
    "%1$" was not submitted to workflow "%2$", because registration has already been "%3$".
*/
#define VMS_invalid_vendor_for_registration                         ( EMH_VMS_error_base + 30 )

/**
    Please select Partner Contract object as a target.
*/
#define VMS_no_contract_for_qualification                           ( EMH_VMS_error_base + 31 )
/**
    The Vendor is not approved for the Partner Contract.
*/
#define VMS_unapproved_vendor_for_contract                          ( EMH_VMS_error_base + 32 )
/**
    The Partner Contract has no Vendor associated with it.
*/
#define VMS_no_vendor_for_contract                                  ( EMH_VMS_error_base + 33 )
/**
    The Partner Contract selected for qualification is invalid.
*/
#define VMS_invalid_contract_for_qualification                      ( EMH_VMS_error_base + 34 )
/**
    The Contract cannot be saved because start date cannot be later than the end date.
*/
#define VMS_invlid_contract_date                                    ( EMH_VMS_error_base + 35 )
/**
    "%1$" cannot be revised. Please select the approved and latest revision of the Partner Contract.
*/
#define VMS_invalid_contract_for_revise                             ( EMH_VMS_error_base + 36 )
/**
    The Partner Contract "%1$" was not submitted to workflow "%2$" because one or more company contact(s) and/or company location(s) are not related to this vendor.
*/
#define VMS_contract_not_submitted_invalid_contact_or_location      ( EMH_VMS_error_base + 37 )

/** @} */

#include <vm/libvm_undef.h>

#endif
